#!/usr/bin/env python3

import argparse
from anomaly_free.methods import find_several_sets

parser = argparse.ArgumentParser(description="Anomaly free package")

parser.add_argument(
    "n",
    type=int,
    default=5,
    action="store",
    help="number z values for each solution",
)

parser.add_argument(
    "--N",
    type=int,
    required=False,
    action="store",
    help="number of l and k vectors",
)

parser.add_argument(
    "--m",
    type=int,
    required=False,
    action="store",
    help="max (min) value that l or k might take",
)

parser.add_argument(
    "--zmax",
    type=int,
    required=False,
    action="store",
    help="max (min) value that z might take",
)

parser.add_argument(
    "--imax",
    type=int,
    required=False,
    action="store",
    help="maximum iterations to find z set from N the lk vectors",
)

parser.add_argument(
    "--suggested_N",
    action="store_true",
    help="suggest an approximated 'good' N for calculating the solutions",
)

parser.add_argument(
    "--output_name",
    nargs="?",
    help="optional output file json with the solutions, it will automatically recognize solution_n.json named files. It will rewrite solution if you keep using the same output_name",
)


args = parser.parse_args()

if __name__ == "__main__":

    inputs = {
        "n": 5,
        "m": 6,
        "N": 1000,
        "zmax": 30,
        "imax": 0,
        "output_name": "solution",
    }

    for arg in args.__dict__:
        if args.__dict__[arg] is not None:
            inputs[arg] = args.__dict__[arg]

    SAVE_INFO = True

    if args.output_name is None:
        SAVE_INFO = False
    else:
        pass

    N_unique = (2 * inputs["m"] + 1) ** (inputs["n"] - 2)

    if args.suggested_N:

        print("N={}*10 for n={} and m={}".format(N_unique, inputs["n"], inputs["m"]))

    else:
        del inputs["suggested_N"]

        inputs["SAVE_FILE"] = SAVE_INFO

        df = find_several_sets(**inputs)
